import streamlit as st
import data_extractor as d_ex
import data_classifier as d_c
from summarizerAgent import generate_summary

# Configuration de la page
st.set_page_config(
    page_title="Newsletter Generator",
    page_icon="todo",
    layout="centered"
)

# Titre principal
st.title("G√©n√©rateur de Newsletter Automatique :wave:")

# Description
st.write("""
Bienvenue sur cette application de d√©monstration. Ici, vous pouvez entrer un lien ou un identifiant (arXiv, GitHub, Hugging Face, ou un blog) 
et l'outil extraira automatiquement les m√©tadonn√©es et le contenu pertinent pour g√©n√©rer une newsletter.
""")

# Entr√©e utilisateur
url_or_id = st.text_input("Entrez l'URL ou l'identifiant de la ressource :", placeholder="Exemple : https://arxiv.org/abs/1234.56789", )

# Gestion de l'option disable du bouton pour le run
if 'extract_button' in st.session_state and st.session_state.extract_button == True:
    st.session_state.running = True
else:
    st.session_state.running = False

# Bouton pour lancer l'extraction
if st.button("Extraire les donn√©es üöÄ", disabled=st.session_state.running, key='extract_button'):
    if url_or_id.strip() == "":
        st.warning("Veuillez entrer un lien ou un identifiant valide.")
    else:
        extractor = d_ex.DataExtractor()
        classifier = d_c.DataClassifier()
        try:
            with st.spinner("Extraction en cours..."):
                data = extractor.extract(url_or_id).to_dict()
                category = classifier.classify(data)

                # Stockage des donn√©es dans la session
                st.session_state.extracted_data = data
                st.session_state.extracted_category = category
        except Exception as e:
            st.error(f"Erreur d'extraction : {e}")

    st.rerun()

if "extracted_data" in st.session_state:
    st.success("Extraction r√©ussie ! Voici les donn√©es r√©cup√©r√©es :")
    with st.container(height=600):
        st.json(st.session_state.extracted_data)

    st.markdown("### R√©sultat de Classification :")
    with st.container():
        st.write(f"**Cat√©gorie d√©tect√©e :** {st.session_state.extracted_category.capitalize()}")
        if st.session_state.extracted_category != "dataset" and st.session_state.extracted_category != "model":
            st.warning("Type de donn√©es non reconnu. Veuillez v√©rifier les m√©tadonn√©es.")
    
    # Bouton de r√©sum√©
    if st.button("R√©sumer les donn√©es üìù"):
        try:
            with st.spinner("R√©sum√© en cours..."):
                summary = generate_summary(st.session_state.extracted_data)
                st.session_state.summary = summary
        except Exception as e:
            st.error(f"Erreur lors du r√©sum√© : {e}")

if "summary" in st.session_state:
    st.markdown("### R√©sum√© G√©n√©r√© :")
    st.write(st.session_state.summary)

# Footer
st.markdown("---")
st.markdown(
    """
    ¬© 2024 Arij BEN RHOUMA, Antoine CASTEL, Arthur VOGELS  - Projet de fin d'√©tude CentraleSup√©lec X ILLUIN Technology ü§ñ.
    """
)
